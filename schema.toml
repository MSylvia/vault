[collections.settings]
indexes = [
  "reader",
  "creator",
  "reader_creator"
]

[collections.events]
indexes = [
  "reader",
  "creator",
  "reader_creator",
  "reader_datetime"
]

[groups.admin]
[groups.admin.rules.carte_blanche]
template = "any()"

[groups.authenticated.rules.user_read]
template = "collection('users').find({id: userId()})"

[groups.authenticated.rules.user_update]
template = "collection('users').anyWrite()"
validator = """
  (user, oldDoc, newDoc) => {
    return true
  }
"""

[groups.authenticated.rules.settings_read]
template = "collection('settings').anyRead()"
validator = """
  (user, doc) => {
    return user.data
        && [doc.creator, doc.reader].indexOf(user.data.key) > -1
  }
"""

[groups.authenticated.rules.settings_write]
template = "collection('settings').anyWrite()"
validator = """
  (user, oldDoc, newDoc) => {
    if (!user.data)
      return false
    cond = []
    if (oldDoc)
      cond.push([oldDoc.creator, oldDoc.reader].indexOf(user.data.key) > -1)
    if (newDoc)
      cond.push([newDoc.creator, newDoc.reader].indexOf(user.data.key) > -1)
    return cond.reduce((prev, cur) => {
      return prev && cur
    })
  }
"""

[groups.authenticated.rules.events_read]
template = "collection('events').anyRead({creator: any(), reader: userId(), content: any()})"

[groups.authenticated.rules.events_write]
template = "collection('events').anyWrite({creator: userId(), reader: any(), content: any()})"
